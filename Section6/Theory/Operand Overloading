# OPERAND OVERLOADING #

* Custom implementation for primitive operators.

* Allows usage of user-defined objects in mathematical expressions

* Overloaded as functions but provide a convenient notation

* Implemented as member or global functions

Example structure: <ret> operator<#>(<arguments>)

* As global functions, require same number of arguments as the operands

* As member functions, one operand is passed as argument through "this" pointer
    - binary operator will require only one explicit argument

    - unary operator will not require any explicit argument

Example structure:  Integer operator +(const Integer &, const Integer &)     ! Global Function
                    Integer Integer::operator +(const Integer &)     ! Member Function


# Keyword friend #

* Used to make a function a friend of a class.

* Can be used for classes by using "friend class".

* It is discouraged because it allows you to access the internal data of a class directly and it can become a source of bugs.

!! "friend" keyword should be used only as a last resort to solve a problem.

# Rules #

!! Associativity, precedence & arity (operand count) does not change.

!! Operator functions should be non-static
        ! except for new & delete;

!! At least one argument should be user defined type.

!! Global overload if first operand is primitive type.

!! Not all operators can be overloaded
        !Exceptions: . (member acces dot), ?: (conditional operators), .* (pointer to member operator), sizeof etc

!! Cannot define new operators

!! Overload should mimic the conventional behaviours or will cause errors